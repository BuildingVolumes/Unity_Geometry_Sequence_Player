var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/quickstart/",title:"Quickstart",description:"GSS Quickstart",content:""}),e.add({id:1,href:"/docs/tutorials/",title:"Tutorials",description:"GSS Tutorials",content:""}),e.add({id:2,href:"/docs/about/",title:"About",description:"GSS About",content:""}),e.add({id:3,href:"/docs/about/building-volumes/",title:"Building Volumes",description:"Our initiave for open-source volumetric video creation",content:`BuildingVolumes is a global initiative by creatives, software engineers, teachers, and artists with the aim to create a free and open-source volumetric capture and playback pipeline. The initative is led by Ciny Poremba and Andrew Hogue.
We want to create free and sustainable tools for small artists, creatives, filmographers, game artists and everyone interested in the creation of Volumetric Video.
If you want to join us, or get in touch, please head over to our community discord 🙂
`}),e.add({id:4,href:"/docs/about/license-credits/",title:"License and credits",description:`The Unity package, the Converter tool, the example data and this website is licensed under the MIT License If you use this package in your project, we\u0026rsquo;d be grateful if you would credit us in your project
MIT License #Copyright 2023 Christopher Remde @ Charité Experimental Surgery \u0026amp; Hunter Dyar
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:`,content:`The Unity package, the Converter tool, the example data and this website is licensed under the MIT License If you use this package in your project, we\u0026rsquo;d be grateful if you would credit us in your project
MIT License #Copyright 2023 Christopher Remde @ Charité Experimental Surgery \u0026amp; Hunter Dyar
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Credits #The sequences in the showreel, from the landing page and on Github, were created by:
\u0026ldquo;Water Simulation (Less than 50MB)2 by Jason Kan
\u0026ldquo;A Windy Day2 by Loic Norgeot
\u0026ldquo;Galactic Incident2 by Loic Norgeot
\u0026ldquo;Simulated\u0026rdquo; by james.d.bryce
\u0026ldquo;Water Dancer\u0026rdquo; by Pavel Shabanov
\u0026ldquo;Rainbow Morph animation\u0026rdquo; by SenYui
\u0026ldquo;Twisty Box\u0026rdquo; by Hunter Dyar
\u0026ldquo;Tubular Twists\u0026rdquo; by Tycho Magnetic Anomaly
`}),e.add({id:5,href:"/docs/tutorials/prepare-data/",title:"Preparing your sequences",description:"How to convert your own sequences into the right format",content:` 💡If you want to playback data captured with LiveScan3D, you can skip this step, as it\u0026rsquo;s already in the right format.
Intro #To gurantee high realtime performance, the Geometry Sequence Streamer can only read sequences that are in special file format (.ply for models, .dds for textures). However, to support a broad spectrum of input formats and make the usage of this plugin as easy as possible, we provide a small converter tool which takes in almost all widely used mesh and image formats, and converts them into the correct format for the plugin.
👉🏻 Even when your files are already in the .ply/.dds format, they might need to be run through the converter to be encoded correctly!
Preparation for the conversion #Naming #In general, you should export your animated mesh or pointcloud sequences from your tool of choice in a way, that each frame of it is saved in a single, independent file. The files should be numbered in some kind of ascending order. This applies to both your models and also textures, if you have any. Save all files into one folder, without subfolders. Example:
frame_1.obj frame_2.obj frame_3.obj ... frame_00001.obj frame_00002.obj frame_00003.obj ... 1_image.png 2_image.png 3_image.png ... Ensure that the matching images and models for each frame have the same number!
Supported file formats #The format in which you export your sequence shouldn\u0026rsquo;t matter too much, as a wide variety of the most commonly used formats is supported. These are all supported file formats for pointclouds/meshes:
.3ds .asc .bre .ctm .dae .e57 .es .fbx .glb .gltf .obj .off .pdb .ply .pts .ptx .qobj .stl .tri vmi .wrl .x3d .xyz And for images:
.dds .gif .jpg .png .psd .tga Converting your sequences #Installing the converter #Download the latest version of the converter tool from here. (File named \u0026ldquo;Geometry_Sequence_Converter_Win64.zip\u0026rdquo;) Currently only windows is supported. Unpack the file Open the converter. Go into the unpacked folder and open \u0026ldquo;GeometrySequenceConverter.exe\u0026rdquo;. Windows might throw a warning that it prevented the app from running, in this case click on \u0026ldquo;Run anyway\u0026rdquo; or \u0026ldquo;More info\u0026rdquo; and then \u0026ldquo;Run anyway\u0026rdquo;. Using the converter #Click on Select Input Directory If you don\u0026rsquo;t see any file structure, you may need to click on Drives Select/Go into the folder which contains your sequence and hit Ok Now choose your output directory. It has to be a different, empty folder! For convinience, you can click Set to Input directory to copy the input folder path, and then use Select Output Directory to choose the empty output folder When you\u0026rsquo;ve set your input/output folders, click on Start Conversion. You can optionally choose the amount of threads used for the conversion, which might come in handy for heavy/large sequences. The converter will now process your files and show a progress bar. If you want to cancel the process, click on Cancel. Cancelling might take a bit of time. When the process is done, you\u0026rsquo;ll have the converted sequence inside of the output folder, which you can now move to another location. The files in the output folder will be used to stream the sequence inside of Unity.
For developers: Format specification #If you want to export your data into the correct format directly, without using the converter, you can do so! The format used here is not proprietory, but uses the open Stanford Polygon File Format (.ply) for meshes and pointclouds and the DirectDraw Surface (.dds)* file format for textures/images. However, both formats allow a large variety of encoding, and the Geometry Sequence Streamer needs to be supplemented a special encoding. The following sections assume that you are a bit familiar with both formats.
Pointcloud .ply files #For .ply files containing pointclouds, use the normal little endian binary .ply standard, but be sure to encode the vertex positions as 32-bit floats (not doubles), and use the vertex colors as uchar RGBA. You always need to provide the red, green, blue and alpha channel, even when your sequence doesn\u0026rsquo;t use alpha values or colors at all. The alpha channel isn\u0026rsquo;t used in the plugin right now, but it allows for faster file reads, as RGBA is the native Unity vertex color format. Don\u0026rsquo;t include any vertex indices! Here is an example of how the header of a ply looks that is correctly formatted:
ply format binary_little_endian 1.0 comment How the header of a correctly formated .ply file with a pointcloud looks like element vertex 50000 property float x property float y property float z property uchar red property uchar green property uchar blue property uchar alpha end_header As an example for how the data for a a single vertex (line) could look like this. Three XZY-Float values are followed by four RGBA byte/uchar values:
0.323434 0.55133 1.44322 255 255 255 0 Mesh .ply files #For .ply files containing meshes, you use the same little endian binary format as for the pointclouds, with the vertex positions encoded as 32-bit floats. Encode the face indices as a uchar uint list, as it is commonly done in the ply format. Only encode faces as triangles, so the uchar component of the face indices list should always be \u0026ldquo;3\u0026rdquo;, the uInts should be 32-bit. If you want to use textures/UV-coordinates, include the U and V-coordinates as additional float propertys (property s and property t) right behind the xyz properties. An example header of a correctly formatted mesh ply file with UV-coordinates would look like this:
ply format binary_little_endian 1.0 comment Exported for use in Unity Geometry Streaming Plugin element vertex 73200 property float x property float y property float z property float s property float t element face 138844 property list uchar uint vertex_indices end_header The data for a single vertex (line) would look like this. Three XYZ-float values, followed by two float values for the UV-coordinates:
0.323434 0.55133 1.44322 0.231286 0.692901 The data for a single indice (line) in the index list could look like this:
3 56542 56543 56544 Textures/Images #The textures should be encoded in the .dds format with BC1/DXT1 encoding and no mip-maps.
`}),e.add({id:6,href:"/docs/quickstart/quick-start/",title:"Quick Start",description:"One page summary of how to playback your first sequence",content:`Install the package #Open your Unity project, and in the toolbar, go to Windows –\u0026gt; Package Manager.
In the Package Manager window, go into the upper left corner and click on the \u0026quot;+\u0026quot; Button –\u0026gt; Add package from Git URL.
Copy and paste the following URL into the field and click Add: https://github.com/BuildingVolumes/Geometry_Sequence_Streaming_Package.git
To install the samples, select the Geometry Streaming Sequence package and open the Sample foldout. Then click on Import.
More info
Play your first sequence #In your assets folder, go into the samples folder(s) and open the Sample scene 01_Basic_Example
Click on the \u0026ldquo;Play\u0026rdquo;-Button in Unity. You should now see a box with a twisting animation. This uses a sequence also found in the sample folder
More info
`}),e.add({id:7,href:"/docs/tutorials/installation/",title:"Unity package installation",description:"Install the Unity package into your project",content:` 👉🏻 Make sure that your Unity project is using Unity 2020.1 or above, versions below are not supported!
Package Installation #Open your Unity project, and in the toolbar, go to Windows \u0026ndash;\u0026gt; Package Manager
In the Package Manager window, go into the upper left corner and click on the \u0026quot;+\u0026quot; Button \u0026ndash;\u0026gt; Add package from Git URL Copy and paste the following URL and click Add: https://github.com/BuildingVolumes/Geometry_Sequence_Streaming_Package.git Unity now installs the package, and after a short time it should show up in your manager. Done! We strongly recommend that you also install the Samples 👇🏻
Importing the samples (optional) #The samples contain a short demo sequence and some scenes, that you can refer to for how to set up your own scenes and playback your own sequences. If you\u0026rsquo;ve never used the plugin before, we strongly recommend to take a look at the samples!
To install the samples, select the Geometry Streaming Sequence and open the Sample foldout. Then click on import. The sample data is now in your Unity assets folder. You can open the sample scenes to take a look how basic playback, timeline playback and the scripting API works. If you run any of the samples in play mode, you should see a box spinning! If it doesn\u0026rsquo;t, please report an issue!
`}),e.add({id:8,href:"/docs/quickstart/own-data-usage/",title:"Use your own sequences",description:"Summary of how to get your own sequences into Unity",content:` 👉🏻 This is just a quick summary of the conversion process, more details can be found here
Conversion #Ensure that in your input sequence, each frame file is numbered in an ascending order
Almost all commonly used pointcloud/mesh (.fbx .obj .gltf .ply .xzy) and image (.dds .jpeg .png .tga) formats can be used as source material. Ensure that your sequence is in such a format
Download the latest converter binaries for windows here (The file named Geometry_Sequence_Converter_Win64.zip)
Unzip, open the converter, and set the input folder to the folder containing your sequence. The output folder should be set to a different (empty) folder. Click on Start Conversion.
Playback in Unity #Open your project and scene in Unity.
Add a GeometrySequencePlayer component to any gameobject.
Click on Open Sequence and open the folder with the converted sequence (the output folder).
Click on Play in Unity. Your scene should now start with the playback/streaming.
`}),e.add({id:9,href:"/docs/tutorials/editor-playback/",title:"Basic playback",description:"Fast playback of your sequences in the editor",content:`Intro #💡 All of the features explained here in this tutorial can also be found in the Sample Scene 01_Basic_Example
After you\u0026rsquo;ve prepared and converted your sequence, you can now stream them from your disk right into Unity! This section shows you how to use the streaming and playback components inside of the editor, to setup a simple playback scene.
Playback #Open your Unity scene in which you want to implement the playback. We recommend that you create a new gameobject, onto which you can attach the streaming and playback scripts/components, but you can use any gameobject of your choice. In the inspector, click on \u0026ldquo;Add Component\u0026rdquo;, search for \u0026ldquo;Geometry Sequence Player\u0026rdquo; and add this component. You should now see a Geometry Sequence Player and Geometry Sequence Stream component attached to your gameobject. Click on \u0026ldquo;Open Sequence\u0026rdquo; in the Player script, and then open the folder, in which your converted sequence is stored.
⚠️ When you\u0026rsquo;re just trying out playback on your machine, or you don\u0026rsquo;t intent to distribute your app to other PCs, it\u0026rsquo;s fine to store the sequence anywhere on disk. However, if you plan to distribute your application, please take a look here!
Set the playback framerate of your sequence. This should be the same framerate in which your animated sequence was exported. Click Play. You should now see your sequence playing back inside of your scene. If you don\u0026rsquo;t see anything, it might simply be because your camera is not looking at the sequence. Go to the scene window, select the \u0026ldquo;Streamed Mesh\u0026rdquo; Gameobject and press \u0026ldquo;F\u0026rdquo; to focus on it. Controls \u0026amp; Settings explained #Detailed explanation of all the settings and controls inside of the player and stream scripts
Player component #Path relation Choose if your path to the sequence is relative to the Data path, Streaming Assets path or is an absolute path. This gets set automatically if you open a sequence with the Open Sequence button. If you enter the path yourself, you also need to set this field!
Path to sequence Enter your relative or absolute path to the folder containing the sequence
Open Sequence / Clear Sequence Use the file explorer to choose the folder where your converted sequence is located, or clear the path from the player.
Target Playback FPS This is the framerate at which you want to playback your sequence. It\u0026rsquo;s important that this is set to the same framerate that you used while animating/capturing your sequence, as it also effects playback speed. E.g. if you exported your sequence at 30 FPS, but set the playback framerate to 60 FPS, the sequence will play twice as fast.
Play at Start Should the playback of the sequence start directly when the scene is started/you entered play mode?
Loop playback If activated, repeats the animation indefinitly
Actual FPS / Frame drop This is the actual framerate at which the sequence plays back. If you either see a framerate lower than your target playback FPS, or see lot\u0026rsquo;s of \u0026ldquo;Frame Dropped!\u0026rdquo; warning messages, this means that your system doesn\u0026rsquo;t have enough resources to playback the sequence at it\u0026rsquo;s intendet speed. You can either reduce the geometric complexity of your sequence, reduce the texture size, or upgrade your system.
Time slider Use this slider to skip to any time in the sequence, just like in a regular video player. On the right, you can see at which frame the playback is right now, and how many frames there are in total in the sequence. The slider is only available in the editor.
Playback controls Use the |\u0026lt; Button to go back to the start of the sequence, the \u0026laquo; and \u0026raquo; to scroll forwards/backwards for a few frames, and the Play/Pause button to pause/resume the playback. These buttons are only available in the editor.
Stream component #Parent Transform You can attach the streamed mesh onto a parent gameobject, which you can use to place, scale, and rotate your streamed mesh.
Pointcloud Material Set an alternative material that is used for displaying pointclouds. If left empty, the supplied default material will be used. Please note that pointclouds cannot use standard Unity Materials/Shaders! You need to use a special Pointcloud shader, like the one provided in the package.
Mesh material Set an alternative material that is used for displaying pointclouds. If left empty, the supplied default material will be used.
Buffer options:
Buffer size This size sets how many frames the streaming service will load from disk and store in a buffer in advance of the playback. A larger buffer might provide a smoother playback, however it also uses more memory and skipping/restarting playback might take longer, as the buffer needs to be flushed.
Use all threads Should the Unity Job system which is responsible for streaming use all available threads? If you deactive this, you can set the thread count yourself, but note that it will also effect other scripts that might use the job system!
Thread count Set how many threads the job system should use. Is only used the Use all threads is deactivated. Will also effect other scripts that might use the job system!
Frame Info This foldout contains read-only frame information. Used only for debugging.
`}),e.add({id:10,href:"/docs/about/changelog/",title:"Changelog",description:"All releases",content:`Version 1.0.1 (Package only) #Fixed Issues:
#1 \u0026ldquo;Cannot build as AssetDatabase cannot be used outside the editor\u0026rdquo;
#2 \u0026ldquo;Android /WebGL cannot load data from StreamingAssets Path\u0026rdquo;
Releases: Package release v1.0.1
Version 1.0.0 #Initial Release, this plugin supersedes the Pointcloud Player Package
Converter release v1.0.0 Package release v1.0.1
`}),e.add({id:11,href:"/docs/tutorials/timeline-integration/",title:"Timeline integration",description:"Control playback via the Unity Timeline",content:`Intro #💡 All of the features explained here in this tutorial can also be found in the Sample Scene 02_Timeline_Example
For playback scenarios, where a precise control of the playback, or cohesive animation with other objects is needed, the package also supports the playback from the Unity Timeline.
Setting up a timeline clip #Open the timeline window by going to Window \u0026ndash;\u0026gt; Sequencing \u0026ndash;\u0026gt; Timeline in the main toolbar Create a new empty gameobject, or select the one you want to attach the timeline to. Add a \u0026ldquo;Geometry Sequence Stream\u0026rdquo; component to the gameobject.
⚠️ Check that there is no \u0026ldquo;Geometry Sequence Player\u0026rdquo; component attached to the gameobject, when you use the Geometry Sequence Stream component for timeline playback!
Go into the Timeline window and click on Create. Save the timeline director file anywhere in your assets folder. Add a geometry sequence track by clicking on the \u0026quot;+\u0026quot;-Button in the top left corner. Click on GeomeotrySequence.Streaming \u0026ndash;\u0026gt; Geometry Sequence Track Drag and drop the gameobject that contains your Geometry Sequence Stream component into the empty field on the track Right-click anywhere on the empty track field and add a clip by clicking on Geometry Sequence Clip With the new clip still selected, go into the inspector and click on Open Sequence. Choose the folder, where your converted sequence is stored in. Due to a missing feature in Unity, the clip doesn\u0026rsquo;t auto-adjust it\u0026rsquo;s length, so the clip might be (a lot) shorter or longer than it actually is. Adjust the duration of the clip manually by dragging on it\u0026rsquo;s end cap, or set the duration in the inspector. Done! The clip will only playback when you\u0026rsquo;re in play mode, so if you want to see your sequence, you need to go into it first.
You can now add more clips on the same track, or play two clips at the same time, by adding a second Geometry Sequence Stream component, and assigning it to a second track.
`}),e.add({id:12,href:"/docs/tutorials/scripting-api/",title:"Scripting API",description:"Advanced control of your playback via script",content:` 💡 All of the features explained here in this tutorial can also be found in the Sample Scene 03_API_Example
Intro #Beside playback from timeline and in the editor, this package also allows you to control playback from your own scripts. This is useful, if you have for example playback control by the user via UI buttons, or you want interactivly integrate playback inside your application.
Setup #To use the Scripting API, you need to have a gameobject in the scene that has the Geometry Sequence Player and Geometry Sequence Stream components attached to it.
First, include the BuildingVolumes namespace inside your script with:
using BuildingVolumes.Streaming; In your script, you then have to get the Geometry Sequence Player component, ideally directly in the start function:
void Start() { //Get our player. player = GetComponent\u0026lt;GeometrySequencePlayer\u0026gt;(); } Then, we recommend that you disable Play at Start and Loop Playback either directly through the editor inside of the Geometry Sequence Player component:
or via script inside of the start function. This ensures that you have full control over when and how you want to play your sequence.
void Start() { //Get our player. player = GetComponent\u0026lt;GeometrySequencePlayer\u0026gt;(); //Disable automatic looping and automatic playback. player.SetLoopPlay(false); player.SetAutoStart(false); } You can the load your sequence with the LoadSequence function at any point:
//Load our sequence, set its framerate to 30 and play it directly after loading player.LoadSequence(\u0026quot;C:\\MySequences\\MyOwnSequence\\\u0026quot;, GeometrySequencePlayer.PathType.AbsolutePath, 30, true); For more functions and precise playback control, please take a look below 👇🏻
Scripting Reference #LoadSequence #LoadSequence(string path, PathType relativeTo, float playbackFPS , (optional) bool autoplay) Load a .ply sequence (and optionally textures) from the path, and start playback if autoplay is enabled. Parameters:
path: The relative or absolute path to the folder containing the directory. Should end with a slash relativeTo: Is the path relative to the data path, streaming assets path, or is it an absolute path? playbackFPS: The framerate in which your animated sequence was exported in. autoplay : Optional parameter, if set to true, playback starts directly after it has been loaded Returns:
True when sequence could successfully be loaded, false when an error has occured while loading. Take a look in the Unity console in this case SetPath #SetPath(string path, PathType relativeTo) Set a new path in the player, but don\u0026rsquo;t load the sequence. Use ReloadSequence() to actually load it, or LoadSequence() to do both at once. Parameters:
path: The relative or absolute path to the folder containing the directory. Should end with a slash relativeTo: Is the path relative to the data path, streaming assets path, or is it an absolute path? ReloadSequence #ReloadSequence((optional) bool autoplay) (Re)Loads the sequence which is currently set in the player, optionally starts playback. Parameters:
autoplay : Optional parameter, if set to true, playback starts directly after it has been loaded Returns:
True when sequence could successfully be reloaded, false when an error has occured while loading. Take a look in the Unity console in this case Play #void Play() Start Playback from the current location.
Pause #void Pause() Pause current playback
SetLoopPlay #void SetLoopPlay(bool enabled) Activate or deactivate looped playback Parameters:
enabled : Set to true/false to enable/disable looped playback SetAutoStart #void SetAutoStart(bool enabled) Activate or deactivate automatic playback (when the scene starts) Parameters:
enabled : Set to true/false to enable/disable automatic playback when the scene has started PlayFromStart #bool PlayFromStart() Seeks to the start of the sequence and then starts playback Returns:
True, when the sequence could be started from the beginning False when there has been an error. GoToFrame #bool GoToFrame(int frame) Goes to a specific frame. Use GetTotalFrames() to check how many frames the clip contains Parameters:
enabled Returns:
True when skipping was successfull False if there has been an error, or the desired frame index was out of range GoToTime #void GoToTime(float timeInSeconds) Goes to a specific time in a clip. The time is dependent on the framerate e.g. the same clip at 30 FPS is twice as long as at 60 FPS. Parameters:
timeInSeconds : The desired timestamp of the sequence to which you want to jump. GetSequencePath #string GetSequencePath() Gets the absolute path to the folder containing the sequence Returns:
The absolute path to the Sequence currently used IsPlaying #bool IsPlaying() Is the current clip playing? Returns:
True if the clip is playing False if it is paused, stopped or not loaded GetLoopingEnabled #bool GetLoopingEnabled() Is looped playback enabled? Returns:
True if the playback is enabled False if it is disabled GetCurrentFrameIndex #int GetCurrentFrameIndex() At which frame is the playback currently? Returns:
The frame index which is currently being played/shown GetCurrentTime #float GetCurrentTime() At which time is the playback currently in seconds? Note that the time is dependent on the framerate e.g. the same clip at 30 FPS is twice as long as at 60 FPS. Returns:
The current timestamp of the clip in seconds GetTotalFrames #int GetTotalFrames() How many frames are there in total in the whole sequence? Returns:
The total number of frames in the sequence GetTotalTime #float GetTotalTime() How long is the sequence in total? Note that the time is dependent on the framerate e.g. the same clip at 30 FPS is twice as long as at 60 FPS. Returns:
The length of the sequence in seconds GetTargetFPS #float GetTargetFPS() The target fps is the framerate we want to achieve in playback. However, this is not guranteed, if system resources are too low. Use GetActualFPS() to see if you actually achieve this framerate Returns:
The playback framerate used currently for this clip GetActualFPS #float GetActualFPS() What is the actual current playback framerate? If the framerate is much lower than the target framerate, consider reducing the complexity of your sequence, and don\u0026rsquo;t forget to disable any V-Sync (VSync, FreeSync, GSync) methods! Returns:
The actual FPS at which your sequence is playing. GetFrameDropped #bool GetFrameDropped() Check if there have been framedrops since you last checked this function. You should pull this data every frame. Too many framedrops mean the system can\u0026rsquo;t keep up with the playback and you should reduce your Geometric complexity or framerate. Returns:
True When there has been a frame dropped since the last time you checked it, False if there has been no framedrop `}),e.add({id:13,href:"/docs/tutorials/distribution/",title:"Distribution",description:"Build and playback on other devices",content:`Build and ship #If you intent to distribute your Application built with the Unity Geometry Sequence Streamer, you need to consider where you store your geometry sequence. In Unity, you need to store all assets loaded at runtime in a Streamingassets folder (exept for Android Builds), located inside of the Asset path root, and store all geometry sequences in there. This folder will be copied into your build as-is.
Inside of the Unity project view, go to the \u0026ldquo;Assets\u0026rdquo; folder and create a Streamingsassets folder there:
Copy all your geometry sequences inside of this folder
In your Geometry Sequence Player, either set the sequence via Open Sequence and then choose the folder inside of your streamingassets path or set the Path Relation to Relative to Streamingassets and then enter the path to your sequence, relative to the Streamingassets folder:
Test your changes and path in playmode, then you can build and distribute your application as usual.
Android #On Android, the StreamingAssets path is a special case. Data stored into this path, will be compressed into the .apk and needs to be decompressed on load. For large files, like geometry sequences, this will make a noticable impact on playback performance, therefore we don\u0026rsquo;t support the Streamingassets path. On Android, you have to use the applications Persistent Data Path. The persistent data path is a special path, reserved for application data on the device. Unlike the StreamingAssets path, Unity won\u0026rsquo;t copy your files automatically to the persistent data path, instead, you have to copy them manually, or on distribution in the Play Store, let your application download them from a server.
⚠️The persistent data path will only be generated on the applications first run on the device. So you need to run the application once, then copy the files and then run the application again, or let the app download the files onto the device before the Geometry Sequence Player runs.
Inside of your Geometry Sequence Player, set the Path Relation to Relative to Persisten Data Path and enter the relative path in which you later want to store your sequence, in this example we choose \u0026ldquo;Sequence/MySequence\u0026rdquo;.
Build the android app, install it on your Android device and run it, then quit the app. The Geometry Sequence won\u0026rsquo;t be playing at this point.
Connect your device to your PC via USB, enable File transfer and then go to the following path on the device: \u0026quot;\\Android\\data\\com.myCompanyName.myProductName\\files\u0026quot;. This is your applications Persistent Data Path.
Copy your sequence files in the same relative path you set in the Geometry Sequence Player. In our example, the geometry files would be copied into this folder \u0026quot;\\Android\\data\\com.myCompanyName.myProductName\\files\\Sequence\\MySequence\u0026quot;
Now run your app again, you should now see the sequence streaming successfully.
`}),e.add({id:14,href:"/docs/help/",title:"Help",description:"GSS Help",content:""}),e.add({id:15,href:"/docs/help/issues/",title:"Issues and bugs",description:`🪲 If you have any issues, are stuck, or experience errors, please report them here in the main Github repository 🪲 #💡 Do a quick search first, if your issue has already been reported. If not, please open a new one, and we\u0026rsquo;ll get back to you!`,content:`🪲 If you have any issues, are stuck, or experience errors, please report them here in the main Github repository 🪲 #💡 Do a quick search first, if your issue has already been reported. If not, please open a new one, and we\u0026rsquo;ll get back to you!
`}),e.add({id:16,href:"/docs/help/contact/",title:"Contact",description:`👋🏻 For cooperation proposals, contributions to the project, or anything else, please contact us here:
📧 Send a mail to the author (Christopher Remde): hey [at] chrisrem.de
👾 Join us in our BuildingVolumes community discord server
☝🏻 If you have an issue in the project, or you encounter any bugs, please don\u0026rsquo;t contact us here, but instead open an issue on Github!`,content:`👋🏻 For cooperation proposals, contributions to the project, or anything else, please contact us here:
📧 Send a mail to the author (Christopher Remde): hey [at] chrisrem.de
👾 Join us in our BuildingVolumes community discord server
☝🏻 If you have an issue in the project, or you encounter any bugs, please don\u0026rsquo;t contact us here, but instead open an issue on Github!
`}),e.add({id:17,href:"/docs/",title:"Docs",description:"Plugin Docs",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()